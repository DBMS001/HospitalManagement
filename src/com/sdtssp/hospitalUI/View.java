/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sdtssp.hospitalUI;

import com.sdtssp.DBConnect;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Dictionary;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nilesh
 */
public class View extends javax.swing.JFrame {
    Statement stmt = null;
    Connection con = null;
    ResultSet rs  = null;
    String Caller ;
    String [] pat ;
    String [] doc ;
    Dictionary patientdb = new Hashtable();
    Dictionary doctordb = new Hashtable();
    /**
     * Creates new form View
     */
    public View() {
            setExtendedState(MAXIMIZED_BOTH | getExtendedState());                 
    }

    public View(String Caller){
            patientdb.put(0, "PatientID");
            patientdb.put(1, "PatientName");
            patientdb.put(2, "FathersName");
            patientdb.put(3, "Email");
            patientdb.put(4, "ContactNo");
            patientdb.put(5, "Age");
            patientdb.put(6, "Remarks");
            patientdb.put(7, "Gender");
            patientdb.put(8, "BG");
            patientdb.put(9, "Doctor");
            patientdb.put(10, "Address");
            patientdb.put(11, "State");
            patientdb.put(12, "City");
            
            doctordb.put(0, "DoctorID");
            doctordb.put(1, "DoctorName");
            doctordb.put(2, "FatherName");
            doctordb.put(3, "Email");
            doctordb.put(4, "ContactNo");
            doctordb.put(5, "Qualifications");
            doctordb.put(6, "Gender");
            doctordb.put(7, "BloodGroup");
            doctordb.put(8, "DateOfJoining");
            doctordb.put(9, "Address");
        this.Caller = Caller;
        this.pat = new String [] {
                "Patient Id", "Patient's Name", "Father's Name", "Email", "Contact", "Age", "Remarks", "Gender", "Blood Group", "Doctor", "Address", "State", "City"
            };
        this.doc = new String [] {
                "Doctor ID", "Doctor's Name", "Father's Name", "Email", "Contact", "Qualification", "Gender", "Blood Group", "Date of Joining", "Address"
            };
        
         initComponents();
        try {
            con = DBConnect.Connect();
            stmt = con.createStatement();
            if(Caller.equals("Patient"))
            {
                String sql = "select * from patientreg";
                rs = stmt.executeQuery(sql);
                DefaultTableModel model = (DefaultTableModel) ViewTab.getModel();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("PatientID"),
                        rs.getString("PatientName"),
                        rs.getString("FathersName"),
                        rs.getString("Email"),
                        rs.getLong("ContactNo"),
                        rs.getInt("Age"),
                        rs.getString("Remarks"),
                        rs.getString("Gender"),
                        rs.getString("BG"),
                        rs.getString("Doctor"),
                        rs.getString("Address"),
                        rs.getString("State"),
                        rs.getString("City")
                    });
                }
            }
            else{
                String sql = "select * from doctor";
                rs = stmt.executeQuery(sql);
                DefaultTableModel model = (DefaultTableModel) ViewTab.getModel();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("DoctorID"),
                        rs.getString("DoctorName"),
                        rs.getString("FatherName"),
                        rs.getString("Email"),
                        rs.getLong("ContactNo"),
                        rs.getString("Qualifications"),
                        rs.getString("Gender"),
                        rs.getString("BloodGroup"),
                        rs.getString("DateOfJoining"),
                        rs.getString("Address")
                    });
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ViewTab = new javax.swing.JTable();
        String [] str = new String [] {};
        if(this.Caller.equals("Patient"))
        {
            str = this.pat;
        }
        else
        str = this.doc;
        UpdBtn = new javax.swing.JButton();
        deleteRecBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Data");

        ViewTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            str
        )
    );
    jScrollPane1.setViewportView(ViewTab);

    UpdBtn.setFont(new java.awt.Font("Chilanka", 1, 18)); // NOI18N
    UpdBtn.setText("Update");
    UpdBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            UpdBtnActionPerformed(evt);
        }
    });

    deleteRecBtn.setFont(new java.awt.Font("Chilanka", 1, 18)); // NOI18N
    deleteRecBtn.setText("Delete");
    deleteRecBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteRecBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1310, Short.MAX_VALUE)
            .addGap(21, 21, 21))
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(301, 301, 301)
            .addComponent(UpdBtn)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteRecBtn)
            .addGap(393, 393, 393))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addComponent(jScrollPane1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(UpdBtn)
                .addComponent(deleteRecBtn))
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(31, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(29, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(13, 13, 13)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UpdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdBtnActionPerformed
        try {
            // TODO add your handling code here:
            String sql="";
            con = DBConnect.Connect();
            stmt = con.createStatement();
            
            int i = ViewTab.getEditingRow();
            int j = ViewTab.getEditingColumn();
            if(ViewTab.getColumnName(0).equals("Patient Id"))
            {
                int row = ViewTab.getSelectedRow();
                sql = "update table patientreg set "+patientdb.get(j)+" = '"+ViewTab.getValueAt(row,j)+"' where PatientID = "+ViewTab.getValueAt(i,0)+"";
            }
            System.out.println(sql);
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdBtnActionPerformed

    private void deleteRecBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecBtnActionPerformed
        try {
            // TODO add your handling code here:
            ImageIcon icon = new ImageIcon("src/images/icons8-task-completed-48.png");
            int row = ViewTab.getSelectedRow();
            stmt = con.createStatement();
            
            String sql;
            if(ViewTab.getColumnName(0).equals("Patient Id"))
            {
                sql = "delete from patientreg where PatientID="+ViewTab.getValueAt(row,0)+"; ";
                int success = stmt.executeUpdate(sql);
                if(success!=0)
                {
                    JOptionPane.showMessageDialog(rootPane,"Patient Deleted Successfully", "Success",1,icon);
                    ((DefaultTableModel)ViewTab.getModel()).removeRow(row);
                }             
            }
            
            if(ViewTab.getColumnName(0).equals("Doctor ID"))
            {
                System.out.println("In doc");
                sql = "delete from doctor where DoctorD="+ViewTab.getValueAt(row,0)+"; ";
                int success = stmt.executeUpdate(sql);
                if(success!=0)
                {
                    JOptionPane.showMessageDialog(rootPane,"Doctor Deleted Successfully", "Success",1,icon);
                    ((DefaultTableModel)ViewTab.getModel()).removeRow(row);
                }             
            }
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteRecBtnActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new View().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdBtn;
    private javax.swing.JTable ViewTab;
    private javax.swing.JButton deleteRecBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
